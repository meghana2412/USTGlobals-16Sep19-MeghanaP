package com.ustglobals.librarymanagementsystem.dao;



import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.PersistenceUnit;
import javax.persistence.Query;
import javax.persistence.TypedQuery;

import org.springframework.stereotype.Repository;

import com.ustglobals.librarymanagementsystem.dto.UserBean;

@Repository
public class AdminDaoImpl implements AdminDAO{
	@PersistenceUnit
	private EntityManagerFactory factory;

	@Override
	public UserBean adminLogin(int userID, String userPassword) {
		
		String jpql ="from UserBean where userID=:userID and userPassword=:userPassword";
		EntityManager manager = factory.createEntityManager();
		Query query = manager.createQuery(jpql);
		query.setParameter("userID", userID);
		query.setParameter("userPassword", userPassword);
		
		try {

			UserBean bean = (UserBean)query.getSingleResult();
			bean.setUserType("Admin");

		return bean;
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return null;

		}
	}
	

	@Override
	public boolean addStudent(UserBean bean) {
		EntityManager manager = factory.createEntityManager();
		EntityTransaction transaction = manager.getTransaction();
		transaction.begin();
		try {
			bean.setUserType("Student");
			manager.persist(bean);
			transaction.commit();
			return true;
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return false;
		}
	}


	@Override
	public boolean addLibrarian(UserBean bean) {
		EntityManager manager = factory.createEntityManager();
		EntityTransaction transaction = manager.getTransaction();
		transaction.begin();
		try {
			bean.setUserType("Librarian");
			manager.persist(bean);
			transaction.commit();
			return true;
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return false;
		}
			
		}


	@Override
	public boolean updateStudent(UserBean bean) {
		EntityManager manager = factory.createEntityManager();
		EntityTransaction transaction = manager.getTransaction();
		transaction.begin();
		UserBean userBean =  manager.find(UserBean.class, bean.getUserID());
		userBean.setUserName(bean.getUserName());
		userBean.setUserEmail(bean.getUserEmail());
		userBean.setUserPassword(bean.getUserPassword());
		userBean.setUserID(bean.getUserID());
		userBean.setUserPhno(bean.getUserPhno());
		
		transaction.commit();
		return true;
	}


	@Override
	public boolean updateLibrarian(UserBean bean) {
		EntityManager manager = factory.createEntityManager();
		EntityTransaction transaction = manager.getTransaction();
		transaction.begin();
		UserBean userBean =  manager.find(UserBean.class, bean.getUserID());
		userBean.setUserName(bean.getUserName());
		userBean.setUserEmail(bean.getUserEmail());
		userBean.setUserPassword(bean.getUserPassword());
		userBean.setUserID(bean.getUserID());
		userBean.setUserPhno(bean.getUserPhno());		
		transaction.commit();
		return true;	}


	@Override
	public boolean deleteUser(int userID) {
		EntityManager manager = factory.createEntityManager();
		EntityTransaction transaction = manager.getTransaction();
		transaction.begin();
		UserBean bean = manager.find(UserBean.class, userID);
		if(bean!=null) {
			manager.remove(bean);
			transaction.commit();
			return true;
		}
		else {
			return false;
		}	}


	@Override
	public boolean regesterAdmin(UserBean bean) {
		EntityManager manager = factory.createEntityManager();
		EntityTransaction transaction = manager.getTransaction();
		transaction.begin();
		try {
			bean.setUserType("Admin");
			manager.persist(bean);
			transaction.commit();
			return true;
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		return false;	
		}	
	

	@Override
	public List<UserBean> showAllUsers() {
		String jpql ="from UserBean";
		EntityManager manager =factory.createEntityManager();
		TypedQuery<UserBean> query=manager.createQuery(jpql,UserBean.class);
		List<UserBean> UserBean = query.getResultList();
		return UserBean;	}


	@Override
	public UserBean searchUser(int userID) {
		EntityManager manager = factory.createEntityManager();
		return manager.find(UserBean.class, userID);	
		}

}
