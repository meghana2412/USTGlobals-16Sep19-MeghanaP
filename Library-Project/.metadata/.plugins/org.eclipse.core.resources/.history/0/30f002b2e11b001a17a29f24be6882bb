package com.ustglobals.librarymanagementsystem.dao;



import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.PersistenceUnit;
import javax.persistence.Query;

import org.springframework.stereotype.Repository;

import com.ustglobals.librarymanagementsystem.dto.UserBean;

@Repository
public class AdminDaoImpl implements AdminDAO{
	@PersistenceUnit
	private EntityManagerFactory factory;

	@Override
	public UserBean adminLogin(int userId, String userPassword) {
		
		String jpql ="from UserBean where userId=:userId and userPassword=:userPassword";
		EntityManager manager = factory.createEntityManager();
		Query query = manager.createQuery(jpql);
		query.setParameter("userId", userId);
		query.setParameter("userPassword", userPassword);
		
		try {
			UserBean bean = (UserBean)query.getSingleResult();
		return bean;
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return null;

		}
	}
	

	@Override
	public boolean addStudent(UserBean bean) {
		EntityManager manager = factory.createEntityManager();
		EntityTransaction transaction = manager.getTransaction();
		transaction.begin();
		try {
			manager.persist(bean);
			transaction.commit();
			return true;
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		return false;	}


	@Override
	public boolean addLibrarian(UserBean bean) {
		EntityManager manager = factory.createEntityManager();
		EntityTransaction transaction = manager.getTransaction();
		transaction.begin();
		try {
			manager.persist(bean);
			transaction.commit();
			return true;
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		return false;	
		}


	@Override
	public boolean updateStudent(UserBean bean) {
		EntityManager manager = factory.createEntityManager();
		EntityTransaction transaction = manager.getTransaction();
		transaction.begin();
		UserBean userBean =  manager.find(UserBean.class, bean.getUserID());
		userBean.setUserName(bean.getUserName());
		userBean.setUserEmail(bean.getUserEmail());
		userBean.setUserPassword(bean.getUserPassword());
		userBean.setUserID(bean.getUserID());
		userBean.setUserPhno(bean.getUserPhno());
		
		transaction.commit();
		return true;
	}


	@Override
	public boolean updateLibrarian(UserBean bean) {
		EntityManager manager = factory.createEntityManager();
		EntityTransaction transaction = manager.getTransaction();
		transaction.begin();
		UserBean userBean =  manager.find(UserBean.class, bean.getUserID());
		userBean.setUserName(bean.getUserName());
		userBean.setUserEmail(bean.getUserEmail());
		userBean.setUserPassword(bean.getUserPassword());
		userBean.setUserID(bean.getUserID());
		userBean.setUserPhno(bean.getUserPhno());		
		transaction.commit();
		return true;	}


	@Override
	public boolean removeStudent(int usn) {
		EntityManager manager = factory.createEntityManager();
		EntityTransaction transaction = manager.getTransaction();
		transaction.begin();
		userBean bean = manager.find(userBean.class, usn);
		if(bean!=null) {
			manager.remove(bean);
			transaction.commit();
			return true;
		}
		else {
			return false;
		}	}


	@Override
	public boolean removeLibrarian(int lid) {
		EntityManager manager = factory.createEntityManager();
		EntityTransaction transaction = manager.getTransaction();
		transaction.begin();
		UserBean bean = manager.find(UserBean.class, lid);
		if(bean!=null) {
			manager.remove(bean);
			transaction.commit();
			return true;
		}
		else {
			return false;
		}
	}


	
}
